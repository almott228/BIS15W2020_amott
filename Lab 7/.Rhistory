shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(),
dashboardBody(fluidPage(
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
selected = "Ethnicity"),
plotOutput("plot", width = "800px", height = "400px")))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit2, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x)) +
geom_bar(stat = "identity", position = "dodge") +
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1), axis.text = element_text(size = 18), axis.title = element_text(size=18))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(),
dashboardBody(fluidPage(
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
selected = "Ethnicity"),
plotOutput("plot", width = "800px", height = "400px")))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit2, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x)) +
geom_bar(stat = "identity", position = "dodge") +
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1)
})
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(),
dashboardBody(fluidPage(
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
selected = "Ethnicity"),
plotOutput("plot", width = "800px", height = "400px")))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit2, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x)) +
geom_bar(stat = "identity", position = "dodge") +
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1), axis.text = element_text(size = 18), axis.title = element_text(size=18))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(),
dashboardBody(fluidPage(
tabsetPanel(
tabPanel("tab 1", "contents"),
tabPanel("tab 2", "contents"),
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
selected = "Ethnicity"),
plotOutput("plot", width = "800px", height = "400px")))
)
server <- function(input, output, session) {
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(),
dashboardBody(fluidPage(
tabsetPanel(
tabPanel("tab 1", "contents"),
tabPanel("tab 2", "contents"))
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(),
dashboardBody(fluidPage(
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
selected = "Ethnicity"),
plotOutput("plot", width = "800px", height = "400px")))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit2, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x)) +
geom_bar(stat = "identity", position = "dodge") +
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1), axis.text = element_text(size = 18), axis.title = element_text(size=18))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(),
dashboardBody(fluidPage(navlistPanel(
tabPanel("tab 1", "contents"),
tabPanel("tab 2", "contents"),
tabPanel("tab 3", "contents")))
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(),
dashboardBody(fluidPage(navlistPanel(
tabPanel("tab 1", "contents"),
tabPanel("tab 2", "contents"),
tabPanel("tab 3", "contents"))
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(),
dashboardBody(fluidPage(navlistPanel(
tabPanel("tab 1", "contents"),
tabPanel("tab 2", "contents"),
tabPanel("tab 3", "contents"),
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
selected = "Ethnicity"),
plotOutput("plot", width = "800px", height = "400px")))
)
server <- function(input, output, session) {
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(),
dashboardBody(fluidPage(navlistPanel(
tabPanel("tab 1", "contents"),
tabPanel("tab 2", "contents"),
tabPanel("tab 3", "contents"))
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(),
dashboardBody(fluidPage(navlistPanel(
tabPanel("tab 1", "contents"),
tabPanel("tab 2", "contents"),
tabPanel("tab 3", "contents")),
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
selected = "Ethnicity"),
plotOutput("plot", width = "800px", height = "400px")))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit2, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x)) +
geom_bar(stat = "identity", position = "dodge") +
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1), axis.text = element_text(size = 18), axis.title = element_text(size=18))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(navlistPanel(
tabPanel("tab 1", "contents"),
tabPanel("tab 2", "contents"),
tabPanel("tab 3", "contents"))),
dashboardBody(fluidPage(
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
selected = "Ethnicity"),
plotOutput("plot", width = "800px", height = "400px")))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit2, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x)) +
geom_bar(stat = "identity", position = "dodge") +
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1), axis.text = element_text(size = 18), axis.title = element_text(size=18))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(navlistPanel(
tabPanel("tab 1", "Category"),
tabPanel("tab 2", "Campus"),
tabPanel("tab 3", "Academic Year"))),
dashboardBody(fluidPage(
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
selected = "Ethnicity"),
plotOutput("plot", width = "800px", height = "400px")))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit2, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x)) +
geom_bar(stat = "identity", position = "dodge") +
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1), axis.text = element_text(size = 18), axis.title = element_text(size=18))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(navlistPanel(
tabPanel("tab 1", "Lab 7/runapp.png"),
tabPanel("tab 2", "Campus"),
tabPanel("tab 3", "Academic Year"))),
dashboardBody(fluidPage(
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
selected = "Ethnicity"),
plotOutput("plot", width = "800px", height = "400px")))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit2, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x)) +
geom_bar(stat = "identity", position = "dodge") +
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1), axis.text = element_text(size = 18), axis.title = element_text(size=18))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(navlistPanel(
tabPanel("tab 1", "R Things/BIS15W2020_amott/Lab 7/runapp.png"),
tabPanel("tab 2", "Campus"),
tabPanel("tab 3", "Academic Year"))),
dashboardBody(fluidPage(
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
selected = "Ethnicity"),
plotOutput("plot", width = "800px", height = "400px")))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit2, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x)) +
geom_bar(stat = "identity", position = "dodge") +
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1), axis.text = element_text(size = 18), axis.title = element_text(size=18))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(navlistPanel(
tabPanel("tab 1", "![Alt text] (/Desktop/R Things/BIS15W2020_amott/Lab 7/runapp.png)"),
tabPanel("tab 2", "Campus"),
tabPanel("tab 3", "Academic Year"))),
dashboardBody(fluidPage(
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
selected = "Ethnicity"),
plotOutput("plot", width = "800px", height = "400px")))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit2, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x)) +
geom_bar(stat = "identity", position = "dodge") +
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1), axis.text = element_text(size = 18), axis.title = element_text(size=18))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(navlistPanel(
tabPanel("tab 1", ![Alt text] (/Home/Desktop/R Things/BIS15W2020_amott/Lab 7/runapp.png)),
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(navlistPanel(
tabPanel("tab 1", ![Alt text] ("/Home/Desktop/R Things/BIS15W2020_amott/Lab 7/runapp.png")),
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(navlistPanel(
tabPanel("tab 1", ![Alt text] ("/Desktop/R Things/BIS15W2020_amott/Lab 7/runapp.png")),
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(),
dashboardBody(fluidPage(
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
selected = "Ethnicity"),
plotOutput("plot", width = "800px", height = "400px")))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit2, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x)) +
geom_bar(stat = "identity", position = "dodge") +
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1), axis.text = element_text(size = 18), axis.title = element_text(size=18))
})
}
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny); runApp('UC Admissions App.R')
runApp('UC Admissions App.R')
runApp('UC Admissions App.R')
runApp('UC Admissions App.R')
runApp('UC Admissions App.R')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
UC_admit <- readr::read_csv("data/UC_admit.csv")
glimpse(UC_admit)
colnames(UC_admit)
anyNA(UC_admit)
UC_admit %>%
purrr::map_df(~ sum(is.na(.))) %>%
pivot_longer(everything(),
names_to= "variables",
values_to = "num_nas") %>%
arrange(desc(num_nas))
UC_admit2 <- UC_admit %>%
mutate(Academic_Yr = as_factor(Academic_Yr))
UC_admit2
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("Category", "Academic_Yr", "Ethnicity"),
selected = "Ethnicity"),
plotOutput("plot", width = "1000px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit2, aes_string(x = "Campus", y = "FilteredCountFR", fill = input$x)) +
geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 60, hjust = 1), axis.text = element_text(size = 18), axis.title = element_text(size=18))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(),
dashboardBody(fluidPage(
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
selected = "Ethnicity"),
plotOutput("plot", width = "800px", height = "400px")))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit2, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x)) +
geom_bar(stat = "identity", position = "dodge") +
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1), axis.text = element_text(size = 18), axis.title = element_text(size=18))
})
}
shinyApp(ui, server)
UC_admit <- readr::read_csv("data/UC_admit.csv")
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Ethnicity Stats"),
dashboardSidebar(),
dashboardBody(fluidPage(
selectInput("x", "Select X Variable", choices = c("Category", "Campus", "Academic_Yr"),
selected = "Ethnicity"),
plotOutput("plot", width = "800px", height = "400px")))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit2, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x)) +
geom_bar(stat = "identity", position = "dodge") +
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1), axis.text = element_text(size = 18), axis.title = element_text(size=18))
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
gapminder2 %>%
select(continent=="Asia") %>%
summarize(n_countries=n_distinct(country))
gapminder %>%
select(continent=="Asia") %>%
summarize(n_countries=n_distinct(country))
knitr::opts_chunk$set(echo = TRUE)
#install.packages("gapminder")
library(tidyverse)
library(gapminder)
options(scipen=999) #disables scientific notation when printing
colnames(gapminder)
summary(gapminder)
glimpse(gapminder)
anyNA(gapminder)
gapminder %>%
na_if("-999") %>%
na_if("") %>%
na_if("\\") %>%
purrr::map_df(~ sum(is.na(.))) %>%
pivot_longer(everything(),
names_to= "variables",
values_to = "num_nas") %>%
arrange(desc(num_nas))
gapminder <- gapminder
gapminder
gapminder_long <-
gapminder %>%
pivot_longer(-c(country, continent, year),
names_to = "measures",
values_to = "value"
)
gapminder_long
gapminder2 <-
gapminder_long %>%
pivot_wider(names_from = "measures",
values_from = "value")
gapminder2
gapminder_wide <-
gapminder %>%
pivot_wider(names_from = year,
values_from = c(lifeExp, pop, gdpPercap))
gapminder_wide
gapminder3 <-
gapminder_wide %>%
pivot_longer(
c(contains("lifeExp"), contains("pop"), contains("gdpPercap")),
names_to = "info_per_year",
values_to = "value") %>%
separate(info_per_year, into = c("observation", "year"), sep = "_") %>%
pivot_wider(
names_from = observation,
values_from = value)
gapminder3
nlevels(gapminder$country)
levels(gapminder$country)
nlevels(gapminder$continent)
levels(gapminder$continent)
gapminder %>%
group_by(continent) %>%
summarise(n_country=n_distinct(country))
gapminder %>%
group_by(continent) %>%
summarise(mean_lifeExp=mean(lifeExp)) %>%
arrange(desc(mean_lifeExp))
gapminder %>%
group_by(country) %>%
summarize(min_lifeExp=min(lifeExp),
max_lifeExp=max(lifeExp))
gapminder %>%
group_by(country) %>%
filter(country == "United States") %>%
summarize(min_lifeExp=min(lifeExp),
max_lifeExp=max(lifeExp))
gapminder %>%
group_by(country) %>%
filter(year=="2007") %>%
filter(lifeExp>=70 & lifeExp<=75)
gapminder %>%
group_by(continent) %>%
filter(continent =="Americas" | continent =="Europe", year=="1997") %>%
summarize(min_lifeExp=min(lifeExp),
max_lifeExp=max(lifeExp),
mean_lifeExp=mean(lifeExp))
gapminder %>%
group_by(country) %>%
filter(year=="1952") %>%
summarize(min_pop=min(pop)) %>%
arrange((min_pop))
gapminder %>%
group_by(country) %>%
filter(year=="2007") %>%
summarize(min_pop=min(pop)) %>%
arrange((min_pop))
gapminder %>%
select(continent=="Asia") %>%
summarize(n_countries=n_distinct(country))
gapminder %>%
select(continent="Asia") %>%
summarize(n_countries=n_distinct(country))
gapminder %>%
filter(continent="Asia") %>%
summarize(n_countries=n_distinct(country))
gapminder %>%
filter(continent=="Asia") %>%
summarize(n_countries=n_distinct(country))
gapminder %>%
filter(continent=="Asia") %>%
names(gapminder) %>%
summarize(n_countries=n_distinct(country))
gapminder %>%
filter(continent=="Asia") %>%
names(gapminder$continent) %>%
summarize(n_countries=n_distinct(country))
gapminder %>%
filter(continent=="Asia") %>%
names(gapminder$continent)
gapminder %>%
filter(continent=="Asia") %>%
levels(gapminder$continent)
gapminder %>%
filter(continent=="Asia") %>%
nlevels(gapminder$continent)
gapminder %>%
filter(continent=="Asia") %>%
levels(gapminder$continent)
gapminder %>%
filter(Continent=="Asia") %>%
levels(gapminder$Continent)
gapminder %>%
filter(continent=="Asia") %>%
levels(gapminder$country)
gapminder %>%
filter(gapminder$continent=="Asia") %>%
levels(gapminder$country)
gapminder %>%
filter(continent=="Asia") %>%
levels(country)
gapminder_asia <-
gapminder2 %>%
group_by(continent) %>%
filter(continent=="Asia")
gapminder_asia <-
gapminder2 %>%
group_by(continent) %>%
filter(continent=="Asia")
levels(country)
gapminder_asia <-
gapminder2 %>%
group_by(continent) %>%
filter(continent=="Asia")$country
gapminder %>%
filter(continent=="Asia")$country
gapminder %>%
filter(continent=="Asia") %>%
distinct(gapminder$country)
gapminder %>%
filter(continent=="Asia") %>%
distinct(country)
runApp('UC Admissions app.R')
runApp('UC Admissions app.R')
